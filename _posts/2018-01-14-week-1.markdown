---
layout: post 
title:  "Week 1"
date:   2018-01-15 17:00:00 -0500
categories: dada 
---

This week marks the beginning of Oregon State's CS373, "Defense Against the Dark Arts", an survey course in security, forensic analysis, and anti-malware tools. I'm particularly excited to begin; my understanding of the subject matter is somewhat limited, although I have enjoyed the brief coverage of security concepts in courses like Networks and Operating Systems. I know basic terms and concepts, and could generally describe a few common malware attack vectors, but have not performed in-depth analysis of specific malware samples, as it seems that we'll be doing here. So, this should all be very interesting.

## Concepts 

CS373 is based on a series of lectures delivered by malware and security specialists, and each week focuses on a different topic or subject within the field. This week's lectures were delivered by Christiaan Beek, a lead scientist and principal engineer at McAfee. Mr. Beek presented an overview of malware and forensic analysis titled "Malware Basics", in which he discussed key terms and concepts as well as the role of anti-malware researchers in fighting back against malware attacks. At the end of each lecture, Mr. Beek conducted forensic analysis exercises using actual malware samples, allowing us to see these concepts in action.

The terms introduced were intended to establish a base level of conversance in malware and malware analysis. Malware ("malicious software") comes in many forms. Among these:
- _Viruses_: generally parasitic (dependent on another file), often polymorphic (able to change form).
- _Trojans_: malicious software masquerading as something benign; typically used to exploit backdoor vulnerabilities, enabling remote control of a compromised computer. Can be used as "droppers" that download additional malware. Used for stealing passwords or personal information, establishing botnets, or - as is becoming more popular - conducting a ransomware attack.
- _PUPs_: Potentially Unwanted Programs; this term describes software that lives in a malware "grey area", including adware, spyware, password recovery tools, and so forth. These are not necessarily unwanted, but there is some likelihood that they have malicious intent.

_Ransomware_, a form of malware that is growing in popularity, was also discussed; this type of malware works by locking important files or directories with an encrypted private key, forcing the target to pay a fee (usually in Bitcoin) to regain access. Mr. Beek noted that ransomware attacks are especially tough to thwart, given the level of encryption present in the password and the anonymity inherent in a currency like Bitcoin. Ransomware is extremely lucrative, too; a successful attack can generate hundreds of thousands of dollars.

Software can generally be categorized as _white_ ("clean" or benign) _black_ (malicious), or _grey_ (ambiguous, not necessarily benign but possessing characteristics of malware). A piece of malware used for testing is called a _sample_, and the system used for testing samples is colloquially known as a _goat_. Malware samples are typically identified and compared using a _hash_- a unique alphanumeric sequence generated from the binary content of a given file. A sufficiently complex hash makes collisions (that is, identical hashes in different files) extremely rare to impossible, and thus hashes are a reliable way to identify and compare samples. Occasionally, partial file hashes are used to compare specific sections of malware in order to establish relationships between similar (but not identical) samples.

As one might expect, there are a multitude of attack vectors used to get malware onto an unsuspecting target's computer, ranging widely in sophistication and complexity. Simple USB sticks are common sources of malware infections; most computer users are not especially suspicious of them, and tend to trust the security of the many USB sticks that float around a home, office, or place of business. An attacker may only need to leave a few infected USB sticks in conspicuous location (say, a parking garage) and trust that those finding them will eventually use them. Malware-laden software can be found in sketchy software distributed through mobile app stores, injected into PDFs or MS Office files, websites that carry Javascript exploits, and so forth. Targets include home computers as well as POS systems (such as those in retail stores), which typically run less secure and outdated versions of Windows XP Embedded. POS-based malware can effectively steal credit card information on each swipe.

Especially sophisticated, protracted, and targeted malware attacks are known as _APTs_, or Advanced Persistent Threats. As organized crime, goverment agencies, and terrorist groups increasingly fight a sort of proxy war through malware, this form of attack has become more prevelant. An APT is typically characterized as a malware attack in which the intruder seeks to obtain proprietary or confidential information without the target's knowledge. APT attackers typically display a highly developed knowledge of languages, tools, and operating system characteristics, dogged and patient intent to attack a specific objective, and a high degree of organization, funding, and motivation.Targets tend to be government agencies, large corporations, universities, and defense contractors, although anyone can be subject to such an attack. As one might guess, motivations tend to be money, revenge, and ideology. However, specific motivations can be difficult to pin down at times - some attackers are just drawn to the thrill of slinking around an organization's network undetected.  

APTs often involve extreme care and planning, along with a healthy dose of social engineering; attackers sometimes search LinkedIn and other social media for hints regarding software used, names of employees, and so forth, with the intent of finding vulnerabilities in a target's security infrastructure. Mr. Beek discussed, as an example, how attackers could find connections between between employees in a procurement divisions and the vendors that they work with. If a smaller, less-secure vendor could be found, the attacker could first gain access to the vendor's computers, sending malware to the main target in the form of Trojan Horses masquerading as email attachments. Upon opening these attachments, malware is executed allowing the attackers access to the target's computers and network.

This is known as a _Waterhole Attack_, and it is a common first step in an APT attack - after gaining access in this manner, attackers silently establish a _Beachhead_, bringing along tools like password crackers, port scanners, and so forth to carry out this stage of the invasion. Once this stage begins, it is typically up to the corporation's endpoint antivirus software to detect any unusual activity; if this fails, the attacker can complete their objective, and slink away undetected.  

As malware attacks become more prevalent and sophisticated, the role of the anti-malware researcher grows in importance. Malware researchers capture and analyze samples worldwide, using _honeypot_ computers configured to appear especially enticing to malware. A captured sample can take days or weeks to fully analyze, even as researchers develop sophisticated analysis tools to circumvent encryption and code obfuscation. As such, malware researchers must develop a deep intutition and understanding of the many forms of malware attacks, as well as expert-level knowledge of the analysis tools that they use - in analysis of a "live" malware sample, there is often little time to lose. Analysis of malware and its effect on a target computer or network is known as _forensic analysis_.

Forensic analysis of malware is divided into two primary forms. The first is _static analysis_, inspection of the malware's source code, binary files, and the strings contained therein. Much malware is written to circumvent or increase the difficulty of static analysis; tools like "packers", which compress compiled code, can be used on binary files to obfuscate their intent or scramble the strings contained therein. Binary files can be XOR-encrypted, requiring decryption with specialized tools before any detailed analysis can begin. The second form of forensic analysis is known as _dynamic analysis_, or inspection of the malware as it executes. Dynamic analysis is typically accomplished using specialized tools like Windows Sysinternal's _Process Monitor_ and _Process Explorer_, which provide detailed insight into the activity of each process running over the course of a particular malware sample's execution. Other useful tools include _Flypaper_, which blocks TCP/IP traffic and/or prevents programs from exiting, and _FakeNet_, which mimics a network connection and records network traffic such as DNS queries and http requests. In practice, both are necessary to develop a full picture of the scope of a particular malware sample - what might be readily apparent in a static analysis may be difficult to spot in a purely dynamic analysis, and vice-versa.

## What I Learned 
 
I found Mr. Beek's lectures informative and entertaining; his anecdotes of life "in the field" were useful, and helped better define his day-to-day work as a malware researcher. Most of this week's subject matter was new to me, and so I spent some time outside of the lectures reading and researching this week's concepts, browsing Wikipedia and other websites for articles about APTs, worms, and ransomware - including a [very informative article][wanna-cry] about the WannaCry ransomware in May 2017. Tying terminology and concepts to real-world events was a handy way to reinforce my understanding of those concepts; with this week's subject matter fresh in my mind, I was able to glean much more from these sorts of malware postmortems. I also found myself returning to course material from my Networks and Operating Systems classes to refresh my memory regarding such concepts as proxy servers, the intricacies of TCP/IP, and so forth. 

As Mr. Beek discussed the rise of APT attacks as a means of corporate or government espionage, I was reminded of the gripping book [_The Cuckoo's Egg_][cuckoo-egg], written by Clifford Stoll. Stoll provides a detailed account of his late-1980s encounter with a German hacker using the Lawrence Berkeley Labs network in an attempt to access sensitive or classified government documents. In modern parlance, this would be described as an APT attack: the hacker's mission was clearly defined, he was equipped with an advanced knowledge of network architecture of the era, and he was uncannily persistent - the attack took place over years. Although the technology described in the book is ancient by today's standards, it is an instructive look into the early days of hacking, malware, and the use of computer networks to achieve criminal objectives.

This week's material focused primarily on malware intended for Windows-based computers. It has been some time since I looked deeply into the internals of any Windows OS, and so the first part of the week was also spent re-familiarizing myself with some Windows-specific concepts; for instance, the intent of a Dynamic Link Library, the organization and purpose of the Registry, and common MS-DOS command-line tools. My goal here was to develop a general understanding or intuition regarding the sorts of files targeted by malware attacks, and to understand why a particular malware sample might want to target a certain registry entry, dll, or other system file. Without this understanding, it would be difficult to efficiently analyze the malware samples provided to us, as I would have a much harder time distinguishing between "normal behavior" and something more sinister.

After watching Mr. Beek's lectures, I began work on Lab 1, static and dynamic analysis of a malware sample named "evil.exe". OSU-provided Virtual Machines running Windows 7 were provided for our analysis. It took some time for me to develop an effective workflow, but as I worked through this assignment I developed a better understanding of the tools discussed in the lectures, which allowed me to work more effficiently. Generally, my process was as follows: 

- Take a Virtual Machine snapshot of a "pre-infection" state.
- Start and activate Flypaper to prevent program exit and block TCP/IP traffic.
- Start _FakeNet_ to simulate a network connection.
- Start _AntiSpy_, _Process Explorer_, and _Process Monitor_ software. 
- Execute the malware sample.
- Use _AntiSpy_ and _Process Explorer_ to develop a high-level sense of the processes started by the malware.
- Use _Process Explorer_'s "Properties" feature to obtain a string dump of the malware, looking for filenames, directories, and registry values contained in the binary itself.
- With these clues, search through Process Monitor, looking for strings and processes identified in the previous steps. Note how the malware behaves, which child processes it starts, and where the strings identified previously are found. 
- Use Windows tools (as well as DOS command-line instructions like `cacls`, `at`, `attrib`, and `fc`) to analyze the changes that the sample has made to the system.
- Observe _FakeNet_ activity to confirm any networking (TCP Receive/Send, UDP Receive/Send) activity observed in the malware.
- Revert to the "pre-infection" snapshot as needed to replicate the malware's behavior.

My analysis primarily used Process Monitor; I found its granularity the most useful for a detailed look into the exact operations and commands carried out by each process. The image below provides an example of this detail - note that each system call is logged as evil.exe attempts to receive `sun[1].htm` via TCP into a browser cache and copy it into the `C:\ntldrs` directory as `system.yf`. 

<figure>
    <img src="/assets/img/sun-system-yf.png">
    <figcaption>Downloading sun[1].htm, saving as C:\ntldrs\system.yf</figcaption>
</figure>

<!--![Process Monitor Output]({{"/assets/img/sun-system-yf.png"}})-->

Although not mentioned in the lecture, I found the MS-DOS `fc` command especially useful. `fc` works very much like the Unix `diff` command - it analyzes the files passed as arguments, and returns any differences between them. This particular sample downloads files and copies them to various locations in the C:\ drive, so to determine which files were copied (and where they were copied to), I used `fc` on a pair of files that I suspected to be identical - if my suspicions were confirmed, I could infer that one of the files was a copy of the other. 

McAfee's _FileInsight_ software was also used to analyze hex dumps of the malware-related executable files. _FileInsight_ is equipped with a string dump plugin, too, which is slightly more user-friendly than the similar tool found in Process Explorer. Its ability to interact with other plugins - such as an XOR decryption tool - was quite helpful later in the week, as I worked through another of Mr. Beek's labs.

With either _Process Explorer_ or _File Insight_, however, the string dumps proved invaluable. Observe how much data is present in _Process Explorer_'s string dump of evil.exe, and how much of a "head start" that this might give us in analyzing a specific malware sample:

<figure>
    <img src="/assets/img/evil-strings.png">
    <figcaption>String dump of evil.exe, as displayed by Process Explorer</figcaption>
</figure>

<!--![evil.exe strings dump]({{"/assets/img/evil-strings.png"}})-->

In addition to helping me develop familiarity with malware analysis tools, the lab was informative in that the malware sample analyzed seemed to display a lot of "typical" malware attributes:
- It modified the Run keys in the registry, ensuring that it runs at startup.
- It serves as a "dropper" for another executable, downloading and starting a second .exe file.
- It modifies the DNS-related _hosts_ file, matching specific hostnames with bogus (and malicious) IP addresses.
- It schedules execution of itself every 30 minutes, again as a means of ensuring its persistence.

It was rewarding to observe and analyze this behavior, as doing so led to a deeper understanding of Windows internals as well as the typical processes used to exploit and modify them. I was especially intrigued by the fact that we were analyzing a (for all intents and purposes) real sample that had been involved in an actual malware attack. This was a welcome (and much appreciated) surprise.

Once Lab 1 was complete, I continued this week's work by quickly working through another lab presented in Mr. Beek's lectures in an effort to observe different types of malware samples. Here, I compared three malware samples using McAfee's _FileInsight_ software, taking advantage of tools like the string dump and decryption plugins to decipher the intent of each sample without running it. The analyzed samples were, again, "real" malware provided for our use. 

A hex dump of the first sample immediately reveals that it is intended to be a portable executable (PE) file: the presence of MZ (`0x4D`) at the very beginning of the file gives this away. Further analysis reveals a number of decipherable strings present in the hex dump: this file does not appear to be encrypted. Using the Strings plugin provided in the software, I see `MSVBM60.DLL`, a reference to the MS Visual Basic 6.0 runtime DLL, a number of references to registry keys located at `Microsoft\Windows\CurrentVersion`, system calls such as `RegDeleteKeyA` and `RegCreateKeyA`, the string `music.exe`, and `temp.zip`. A screenshot of the Strings output in _FileInsight_ is below:

<figure>
    <img src="/assets/img/sample-1-strings.png">
    <figcaption>String dump of Sample 1, as displayed by FileInsight</figcaption>
</figure>

<!--![sample 1 strings]({{"/assets/img/sample-1-strings.png"}})-->

Based on a _purely_ static analysis of this sample, I can conclude that it is an executable, that it accesses and modifies the registry, and that its execution is somehow tied to filenames `music.exe` and `temp.zip`. In his lecture, Mr. Beek claims that we can't definitively know the intent of this malware based on this form of static analysis, and that further research would be necessary. I concur, although after a bit of research into the purpose of the `Software\Microsoft\Windows\CurrentVersion\Explorer` registry entries, it seems that this executable is, in part, intended to modify how Windows Explorer displays files and folders.

I continued by analyzing a hex dump of the second file. Again, I noticed that this was a portable executable. When I dumped the strings, I found something very interesting:

<figure>
    <img src="/assets/img/sample-2-strings.png">
    <figcaption>String dump of Sample 2, as displayed by FileInsight</figcaption>
</figure>

<!--![sample 2 strings]({{"/assets/img/sample-2-strings.png"}})-->

The text is cut off in the screenshot, but the "Your PC is blocked..." message goes on to explain how to regain access to files, the consequences of attempting to retrieve the files oneself, and so forth. This is obviously ransomware - likely a much more serious malware sample than the first.

The third sample is encrypted - I used the XOR text search plugin to find key words that might be present; interestingly, decrypting by keyword `.exe` yields a string containing `http`; this is a clue that the sample may be a dropper, or at least that it is network-connected somehow. A search for `system32` also yields a string containing the .dll file `winprox.dll`, which does not appear to be a valid Windows system file. In both cases, the XOR decryption key 0x01 found the target string, and decrypting the entire binary file with this key yielded an interesting string dump:

<figure>
    <img src="/assets/img/sample-3-strings.png">
    <figcaption>Decrypted string dump of Sample 3, as displayed by FileInsight</figcaption>
</figure>

<!--![sample 3 strings]({{"/assets/img/sample-3-strings.png"}})-->

Note the presence of a URL (`http://....`), IP addresses, a file named `AdobeUpdate.exe`, and the suspiciously named `winprox.dll` file. It's fairly clear that this sample is at least a dropper for another malicious file, perhaps performing its own malicious activities similar to the sample analyzed in Lab 1. 

Mr. Beek asked the class to order these samples based on severity; the consensus was that Sample 2 is the most severe, followed by Sample 3, then Sample 1. I'd agree with this assessement; Sample 2 is likely very severe in nature, and we can observe that Sample 3 has the ability to download malicious files itself. The purpose of Sample 1 is, to some extent, a mystery- it obviously affects registry keys, but we can't be sure of its harmfulness without a more comprehensive analysis.

This static string analysis exercise marked the end of an encouraging first week in CS373. Mr. Beek's review of key malware concepts was useful and informative, and the lab exercises both reinforced some of these concepts and to develop familiarity with some of the tools used by professional malware researchers. I'm looking forward to next week.

[wanna-cry]: https://en.wikipedia.org/wiki/WannaCry_ransomware_attack
[cuckoo-egg]: https://en.wikipedia.org/wiki/The_Cuckoo%27s_Egg
